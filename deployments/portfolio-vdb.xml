<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vdb name="Portfolio" version="1">

    <description>The Portfolio Dynamic VDB</description>
    
    <!-- 
               Setting to use connector supplied metadata. Can be "true" or "cached".  
      "true" will obtain metadata once for every launch of Teiid. 
      "cached" will save a file containing the metadata into 
      the deploy/<vdb name>/<vdb version/META-INF directory
    -->
    <property name="UseConnectorMetadata" value="true" />

    <!-- 
               Each model represents a access to one or more sources.
      The name of the model will be used as a top level schema name
      for all of the metadata imported from the connector.
    
      NOTE: Multiple models, with different import settings, can be bound to 
      the same connector binding and will be treated as the same source at
      runtime. 
    --> 

    <model name="Accounts">
        <!-- 
                       JDBC Import settings 
          
          importer.useFullSchemaName directs the importer to drop the source 
          schema from the Teiid object name, so that the Teiid fully qualified name
          will be in the form of <model name>.<table name>
        -->
        <property name="importer.useFullSchemaName" value="false"/>
           
         <!--
                          This connector is defined to reference the H2 localDS" 
          -->
        <source name="h2-connector" translator-name="translator-h2" connection-jndi-name="java:jboss/datasources/ExampleDS"/>
    </model>

    
    <model name="Stocks" type="VIRTUAL">
        <metadata type="DDL"><![CDATA[
                
        
        CREATE VIEW Stock (
            product_id integer,
            symbol string,
            price bigdecimal,
            company_name   varchar(256)
            )
            AS
                SELECT  A.ID, S.symbol, S.price, A.COMPANY_NAME
                    FROM StockPrices AS S, Accounts.PRODUCT AS A
                    WHERE S.symbol = A.SYMBOL;

                 
        ]]> </metadata>
    </model>
    
    <model name="OtherHoldings" type="VIRTUAL">
    	<metadata type="DDL"><![CDATA[
    	
    	        CREATE VIEW PersonalHoldings (
            ACCOUNT_ID integer,
            SSN string,
            STATUS string,
            TYPE string,
            PRODUCT_TYPE string,
            PRODUCT_VALUE bigdecimal
            )
            AS  
               SELECT b.ACCOUNT_ID, b.ssn, b.Status, b.Type, a.PRODUCT_TYPE, CONVERT(PRODUCT_VALUE, bigdecimal) AS PRODUCT_VALUE
                                        FROM PersonalValuations.SHEET1 as A, Accounts.Account as B
                                        where A.ACCOUNT_ID = b.ACCOUNT_ID
     	]]>
   		</metadata>
	</model>  
                                              
	<model name="StocksMatModel" type="VIRTUAL">
		<metadata type="DDL"><![CDATA[
	CREATE view stockPricesMatView
		(
            product_id integer,
            symbol string,
            price bigdecimal,
            company_name   varchar(256)
 		) OPTIONS (MATERIALIZED 'TRUE', UPDATABLE 'TRUE',         
               MATERIALIZED_TABLE 'Accounts.h2_stock_mat', 
               "teiid_rel:MATVIEW_TTL" 120000,
               "teiid_rel:MATVIEW_BEFORE_LOAD_SCRIPT" 'execute accounts.native(''truncate table mat_stock_staging'');',
               "teiid_rel:MATVIEW_AFTER_LOAD_SCRIPT"  'execute accounts.native(''ALTER TABLE h2_stock_mat RENAME TO h2_stock_mat_temp'');execute accounts.native(''ALTER TABLE mat_stock_staging RENAME TO h2_stock_mat'');execute accounts.native(''ALTER TABLE h2_stock_mat_temp RENAME TO mat_stock_staging'');', 
               "teiid_rel:ON_VDB_DROP_SCRIPT" 'DELETE FROM Accounts.status WHERE Name=''stock'' AND schemaname = ''Stocks''',
               "teiid_rel:MATERIALIZED_STAGE_TABLE" 'Accounts.mat_stock_staging',
               "teiid_rel:ALLOW_MATVIEW_MANAGEMENT" 'true', 
               "teiid_rel:MATVIEW_STATUS_TABLE" 'status', 
               "teiid_rel:MATVIEW_SHARE_SCOPE" 'NONE',
               "teiid_rel:MATVIEW_ONERROR_ACTION" 'THROW_EXCEPTION')
 		AS SELECT  A.ID, S.symbol, S.price, A.COMPANY_NAME
                    FROM Stocks.StockPrices AS S, Accounts.PRODUCT AS A
                    WHERE S.symbol = A.SYMBOL;
    	]]>
   		</metadata>
	</model>  
	
    <translator name="translator-h2" type="h2">
        <property name="SupportsNativeQueries" value="true"/>
    </translator>
   
</vdb>
